<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
>
    <!--  引入其它spring 文件 -->
    <import resource="classpath:/spring/spring-redis.xml" />
    <!-- 加载属性文件 -->
    <context:property-placeholder location="classpath:properties/*.properties" />
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 这里使用的是druid连接池  -->
        <property name="maxActive" value="${druid.maxActive}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="600000"/>
        <property name="minEvictableIdleTimeMillis" value="600000"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 数据库密码加密 -->
        <!--<property name="filters" value="stat,config"/>
        <property name="connectionProperties" value="${db_props:config.decrypt=false}"/>-->
    </bean>
    <!-- 让spring管理sqlSessionFactory 这里是spring与mybatis的集成 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
        <!--mapper映射文件 -->
        <property name="mapperLocations">
          <list>
              <value>classpath*:com/xiangshangkan/framtest/auto/dao/mapper/*.xml</value>
          </list>
        </property>
    </bean>
    <!-- mapper scanner mapper接口位置  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xiangshangkan.framtest.auto.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 包扫描器 -->
    <context:component-scan base-package="com.xiangshangkan.framtest.service"/><!-- 具体service包的路径取决于你新建的java代码的service层包  -->

    <!-- 开启事务注解驱动 -->
    <tx:annotation-driven/>
    <!--事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <!-- 遇远程方法的时候有事务将事务挂起 -->
            <tx:method name="remote*" propagation="NOT_SUPPORTED"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面配置 -->
    <aop:config proxy-target-class="true">
        <!-- 拦截service 下面的所有包 -->
        <aop:pointcut id="mycut" expression="execution(* com.xiangshangkan.framtest.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mycut"/>
    </aop:config>

</beans>