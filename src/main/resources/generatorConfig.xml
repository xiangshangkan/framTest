<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
      resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
      url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
      注意，两个属性只能选址一个;

      另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
  -->
    <properties resource="db.properties"/>

    <!-- 在MBG工作的时候，需要额外加载的依赖包
      location属性指明加载jar/zip包的全路径
 <classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" />
   -->
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="mysql" defaultModelType="conditional" targetRuntime="MyBatis3">
        <!-- 扩展example类支持区分大小写的模糊查询 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin"/>
        <!-- 添加Serializable接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 添加toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 添加equals和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <!-- 可以用于分页 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>
        <!-- 增加注释,这个重要,用于增量修改 -->
        <commentGenerator>
            <property name="addRemarkComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        <!-- 必须要有的，使用这个配置链接数据库 -->
        <jdbcConnection
                driverClass="${jdbc.driver}"
                connectionURL="${jdbc.url}"
                userId="${jdbc.username}"
                password="${jdbc.password}">
            <!-- 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"/>
            <property name="characterEncoding" value="UTF8"/>
        </jdbcConnection>

        <!-- java类型处理器 -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- java模型创建器，是必须要的元素 定义java生成文件位置-->
        <javaModelGenerator targetPackage="com.xiangshangkan.framTest.auto.entity.study" targetProject="src/main/java">
            <!--<property name="enableSubPackages" value="true"/>-->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器 定义文件生成位置 -->
        <sqlMapGenerator targetPackage="com.xiangshangkan.framTest.auto.dao.study.mapper" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <!--<property name="enableSubPackages" value="true"/>-->
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口 DAO   定义文件生成位置-->
        <javaClientGenerator
                targetPackage="com.xiangshangkan.framTest.auto.dao.study"
                type="XMLMAPPER"
                targetProject="src/main/java">
        </javaClientGenerator>
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
       注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
    -->
        <!--
         tableName  表明
         domainObjectName 生成的实体对象名称
         mapperName  mapper文件名称
         -->
        <table
                tableName="zx_acceptance_item"
                domainObjectName="ZxAIEntity"
                mapperName="IZxAIAutoDAO"
                schema="kp">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
    </context>
</generatorConfiguration>